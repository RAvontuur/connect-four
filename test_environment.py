from environment import ConnectFourEnvironment


# test X wins (vertical)
env = ConnectFourEnvironment()
assert(env.terminated == False)
assert(env.next_to_move == 1)
env.move(0)
assert(env.next_to_move == -1)
env.move(6)
assert(env.next_to_move == 1)
env.move(0)
assert(env.next_to_move == -1)
env.move(6)
assert(env.next_to_move == 1)
env.move(0)
assert(env.next_to_move == -1)
env.move(6)
assert(env.next_to_move == 1)
env.move(0)

assert(env.next_to_move == -1)
assert(env.terminated == True)
assert(env.game_result(1) == 1)
assert(env.game_result(-1) == -1)
assert(env.connect_four == [0,7,14,21])


# test 0 wins (vertical)
env = ConnectFourEnvironment()
assert(env.terminated == False)
assert(env.next_to_move == 1)
env.move(0)
assert(env.next_to_move == -1)
env.move(6)
assert(env.next_to_move == 1)
env.move(0)
assert(env.next_to_move == -1)
env.move(6)
assert(env.next_to_move == 1)
env.move(0)
assert(env.next_to_move == -1)
env.move(6)
assert(env.next_to_move == 1)
env.move(1)
assert(env.next_to_move == -1)
env.move(6)
assert(env.next_to_move == 1)
assert(env.terminated == True)
assert(env.game_result(1) == -1)
assert(env.game_result(-1) == 1)
assert(env.connect_four == [6,13,20,27])

# test X wins (horizontal)
env = ConnectFourEnvironment()
assert(env.terminated == False)
assert(env.next_to_move == 1)
env.move(0)
assert(env.next_to_move == -1)
env.move(0)
assert(env.next_to_move == 1)
env.move(1)
assert(env.next_to_move == -1)
env.move(1)
assert(env.next_to_move == 1)
env.move(2)
assert(env.next_to_move == -1)
env.move(2)
assert(env.next_to_move == 1)
env.move(3)

assert(env.next_to_move == -1)
assert(env.terminated == True)
assert(env.game_result(1) == 1)
assert(env.game_result(-1) == -1)
assert(env.connect_four == [0,1,2,3])

# test X wins (horizontal)
env = ConnectFourEnvironment()
assert(env.terminated == False)
assert(env.next_to_move == 1)
env.move(0)
assert(env.next_to_move == -1)
env.move(0)
assert(env.next_to_move == 1)
env.move(1)
assert(env.next_to_move == -1)
env.move(1)
assert(env.next_to_move == 1)
env.move(2)
assert(env.next_to_move == -1)
env.move(2)
assert(env.next_to_move == 1)
env.move(4)
assert(env.next_to_move == -1)
env.move(4)
assert(env.next_to_move == 1)
env.move(5)
assert(env.next_to_move == -1)
env.move(5)
assert(env.next_to_move == 1)
env.move(6)
assert(env.next_to_move == -1)
env.move(6)
assert(env.next_to_move == 1)

env.move(3)

assert(env.next_to_move == -1)
assert(env.terminated == True)
assert(env.game_result(1) == 1)
assert(env.game_result(-1) == -1)
assert(env.connect_four == [0,1,2,3,4,5,6])
assert(env.connect_four_count == 4)

# test O wins (horizontal)
env = ConnectFourEnvironment()
assert(env.terminated == False)
assert(env.next_to_move == 1)
env.move(0)
assert(env.next_to_move == -1)
env.move(0)
assert(env.next_to_move == 1)
env.move(1)
assert(env.next_to_move == -1)
env.move(1)
assert(env.next_to_move == 1)
env.move(2)
assert(env.next_to_move == -1)
env.move(2)
assert(env.next_to_move == 1)
env.move(4)
assert(env.next_to_move == -1)
env.move(3)
assert(env.next_to_move == 1)
env.move(5)
assert(env.next_to_move == -1)
env.move(3)

assert(env.next_to_move == 1)
assert(env.terminated == True)
assert(env.game_result(1) == -1)
assert(env.game_result(-1) == 1)
assert(env.connect_four == [7,8,9,10])


# test X wins (right-up)
env = ConnectFourEnvironment()
assert(env.terminated == False)
assert(env.next_to_move == 1)
env.move(0)
assert(env.next_to_move == -1)
env.move(1)
assert(env.next_to_move == 1)
env.move(1)
assert(env.next_to_move == -1)
env.move(2)
assert(env.next_to_move == 1)
env.move(2)
assert(env.next_to_move == -1)
env.move(3)
assert(env.next_to_move == 1)
env.move(2)
assert(env.next_to_move == -1)
env.move(3)
assert(env.next_to_move == 1)
env.move(4)
assert(env.next_to_move == -1)
env.move(3)
assert(env.next_to_move == 1)
env.move(3)

assert(env.next_to_move == -1)
assert(env.terminated == True)
assert(env.game_result(1) == 1)
assert(env.game_result(-1) == -1)
assert(env.connect_four == [0,8,16,24])

# test X wins (left-down)
env = ConnectFourEnvironment()
assert(env.terminated == False)
assert(env.next_to_move == 1)
env.move(3)
assert(env.next_to_move == -1)
env.move(2)
assert(env.next_to_move == 1)
env.move(2)
assert(env.next_to_move == -1)
env.move(1)
assert(env.next_to_move == 1)
env.move(1)
assert(env.next_to_move == -1)
env.move(0)
assert(env.next_to_move == 1)
env.move(1)
assert(env.next_to_move == -1)
env.move(0)
assert(env.next_to_move == 1)
env.move(5)
assert(env.next_to_move == -1)
env.move(0)
assert(env.next_to_move == 1)
env.move(0)

assert(env.next_to_move == -1)
assert(env.terminated == True)
assert(env.game_result(1) == 1)
assert(env.game_result(-1) == -1)
assert(env.connect_four == [3,9,15,21])

print("all tests OK")
